#!/usr/bin/python
# -*- coding: utf-8 -*-
#****************************************************************************
#*                                                                          *
#* by Zoltan Hubert                                                         *
#*                                                                          *
#*   code partially based on:                                               *
#*                                                                          *
#* Caliper tool, icons by easyw-fc                                          *
#* evolution of Macro_CenterFace                                            *
#* some part of Macro WorkFeature                                           *
#* and Macro Rotate To Point, Macro_Delta_xyz                               *
#* and assembly2                                                            *
#*                                                                          *
#* Measure tool                                                             *
#*                                                                          *
#*    This is a stand-alone tool that doesn't need anything outside Part    *
#*                                                                          *
#*    This program is free software; you can redistribute it and/or modify  *
#*    it under the terms of the GNU Library General Public License (LGPL)   *
#*    as published by the Free Software Foundation; either version 2 of     *
#*    the License, or (at your option) any later version.                   *
#*    for detail see the LICENCE text file.                                 *
#****************************************************************************




import threading, sys, math, os
import numpy as np
import base64

from PySide import QtGui, QtCore
from pivy import coin

import FreeCADGui as Gui
import FreeCAD as App
from FreeCAD import Base
from FreeCAD import Console as FCC
import Part

# only needed for icons
import Asm4_libs as Asm4
import selectionFilter




"""
    +-----------------------------------------------+
    |                Global variables               |
    +-----------------------------------------------+
"""
global taskUI, addedDims, PtS, Asm4_3DselObserver
addedDims = []
PtS = None


annoFontSize = 12.0
annoPrecision = 0.001
iconDir = Asm4.iconPath


# remove previous snap point
def removePtS():
    global PtS
    if PtS and hasattr(PtS,'Name') and App.ActiveDocument.getObject(PtS.Name):
        App.ActiveDocument.removeObject(PtS.Name)
        PtS = None


# usage:
# object = App.ActiveDocument.addObject('App::FeaturePython','objName')
# object.ViewObject.Proxy = setCustomIcon(object,'Icon.svg')
# import base64
# encoded = base64.b64encode(open("filename.png", "rb").read())
class setCustomIcon():
    def __init__( self, obj, iconFile ):
        icon = os.path.join( iconDir , iconFile )
        self.customIcon = icon

    def getIcon(self):
        return self.customIcon


"""
    +-----------------------------------------------+
    |         The menu and toolbar command          |
    +-----------------------------------------------+
"""
class MeasureCmd():
    def __init__(self):
        super(MeasureCmd,self).__init__()

    def GetResources(self):
        return {"MenuText": "Measure",
                "ToolTip": "Measure Tool",
                "Pixmap" : os.path.join( iconDir , 'Part_Measure.svg')
                }

    def IsActive(self):
        if App.ActiveDocument:
            return True
        return False

    def Activated(self):
        Gui.Control.showDialog( MeasureUI() )




"""
    +-----------------------------------------------+
    |    The UI and functions in the Task panel     |
    +-----------------------------------------------+
"""
class MeasureUI():

    def __init__(self):
        self.base = QtGui.QWidget()
        self.form = self.base
        iconFile = os.path.join( iconDir , 'Part_Measure.svg')
        self.form.setWindowIcon(QtGui.QIcon( iconFile ))
        self.form.setWindowTitle('Measure')

        # remove selectionFilter
        global Asm4_3DselObserver
        self.selectionFilterStatus = selectionFilter.observerStatus()
        selectionFilter.observerDisable()
        selectionFilter.uncheckAll()

        # draw the GUI, objects are defined later down
        self.drawUI()
        global taskUI
        taskUI = self
        global PtS
        global addedDims

        # start the observer
        Gui.Selection.clearSelection()
        #self.so=SelObserverCaliper()
        self.so = selectionObserver()
        Gui.Selection.addObserver( self.so, 1 ) # 1 = resolve
        FCC.PrintMessage('Observer started\n')

        # enable the measurement points
        self.Selection1.setEnabled(True)
        self.Selection1.setChecked(False)
        self.Selection2.setEnabled(False)
        self.sel1Icon.setIcon(QtGui.QIcon(self.selectIcon))
        # init finished


    # standard FreeCAD Task panel buttons
    def getStandardButtons(self):
        return int(   QtGui.QDialogButtonBox.Cancel
                    | QtGui.QDialogButtonBox.Reset
                    | QtGui.QDialogButtonBox.Ok )

    # OK button
    def accept(self):
        # update the Measure group to get rid if the small overlay icon
        App.ActiveDocument.recompute()
        self.Finish()

    # Cancel button
    def reject(self):
        self.Reset()
        self.Finish()

    # Reset button
    def clicked(self, button):
        if button == QtGui.QDialogButtonBox.Reset:
            self.Reset()

    # Close
    def Finish(self):
        FCC.PrintMessage("closing ... ")
        try:
            Gui.Selection.removeObserver(self.so)   # uninstall the resident SelObserver function
            FCC.PrintMessage("done\n")
        except:
            FCC.PrintWarning("was not able to remove observer\n")
        # remove PtS because it can have strange results
        removePtS()
        # close Task widget
        Gui.Control.closeDialog()

    # Reset (clear measures)
    def Reset(self):
        global PtS, addedDims
        Gui.Selection.clearSelection()
        self.clearConsole()
        FCC.PrintMessage('Removing all measurements ...')
        removePtS()
        for d in addedDims:
            FCC.PrintMessage('.')
            try:
                App.ActiveDocument.removeObject(d.Name)
            except:
                pass
        addedDims=[]
        # also remove the "Measures" group if any
        if App.ActiveDocument.getObject('Measures') and \
                    App.ActiveDocument.getObject('Measures').TypeId=='App::DocumentObjectGroup':
            App.ActiveDocument.removeObject('Measures')
        # clear UI
        self.sel1Name.clear()
        self.sel2Name.clear()
        self.sel1Icon.setIcon(QtGui.QIcon(self.selectIcon))
        self.sel2Icon.setIcon(QtGui.QIcon(self.noneIcon))
        self.Selection1.setEnabled(True)
        self.Selection1.setChecked(False)
        self.Selection2.setEnabled(False)
        self.resultText.clear()
        FCC.PrintMessage(' done\n')


    # clear report view and Python panel
    def clearConsole(self):
        #clearing previous messages
        mw = Gui.getMainWindow()
        #c=mw.findChild(QtGui.QPlainTextEdit, "Python console")
        #c.clear()
        rv = mw.findChild(QtGui.QTextEdit, "Report view")
        rv.clear()

    # Actions
    #
    # when changing the measurement type, reset pre-existing selection
    def onMeasure_toggled(self):
        global PtS
        self.Selection1.setChecked(False)
        self.Selection2.setEnabled(False)
        Gui.Selection.clearSelection()
        removePtS()
        self.sel1Icon.setIcon(QtGui.QIcon(self.selectIcon))
        self.sel2Icon.setIcon(QtGui.QIcon(self.noneIcon))
        # Angle dimensions only work with Snap selection
        if self.rbAngle.isChecked():
            self.rbShape.setChecked(True)

    # re-initialize Selection 1
    def onSel1_toggled(self):
        if not self.Selection1.isChecked() and self.Selection2.isEnabled():
            self.Selection1.setChecked(False)
            self.sel1Name.clear()
            self.Selection2.setEnabled(False)
            Gui.Selection.clearSelection()
            removePtS()
            self.sel1Icon.setIcon(QtGui.QIcon(self.selectIcon))
            self.sel2Icon.setIcon(QtGui.QIcon(self.noneIcon))
        else:
            if not self.Selection2.isEnabled():
                self.Selection1.setChecked(False)
                self.sel1Icon.setIcon(QtGui.QIcon(self.selectIcon))
                #self.sel2Icon.setIcon(QtGui.QIcon(self.noneIcon))

    # Angle can be measured only between shapes
    def onSnap_toggled(self):
        if self.rbAngle.isChecked() and self.rbSnap.isChecked():
            self.rbDistance.setChecked(True)


    # defines the UI, only static elements
    def drawUI(self):
        iconSize = 32
        btSize = 48
        btn_sizeX=32;btn_sizeY=32;
        btn_sizeX=32;btn_sizeY=32;
        chkb_sizeX=20;chkb_sizeY=20;
        btn_sm_sizeX=20;btn_sm_sizeY=20;
        btn_md_sizeX=26;btn_md_sizeY=26;

        # icons of UI
        pm = QtGui.QPixmap()
        self.noneIcon      = None
        pm.loadFromData(base64.b64decode(    valid_b64         ))
        self.validIcon     = QtGui.QIcon(pm)
        pm.loadFromData(base64.b64decode(    select_b64        ))
        self.selectIcon    = QtGui.QIcon(pm)
        # icons for the tree
        self.pointIcon     = 'Draft_Point.svg'
        self.lineIcon      = 'Draft_Line.svg'
        self.circleIcon    = 'Draft_Circle.svg'
        self.dimensionIcon = 'Draft_Dimension.svg'

        # the layout for the main window is vertical (top to down)
        self.mainLayout = QtGui.QVBoxLayout(self.form)

        # measurement type
        self.mainLayout.addWidget(QtGui.QLabel('Controls'))
        self.measureGroup = QtGui.QFrame(self.form)
        self.measureGroup.setFrameStyle(QtGui.QFrame.StyledPanel | QtGui.QFrame.Plain)
        self.mainLayout.addWidget(self.measureGroup)
        self.measureGrid = QtGui.QGridLayout(self.measureGroup)
        self.mainLayout.addLayout(self.measureGrid)

        # 0,0
        pm.loadFromData(base64.b64decode(Dim_Radius_b64))
        self.rbRadius = QtGui.QRadioButton(self.measureGroup)
        self.rbRadius.setObjectName("rbRadius")
        self.rbRadius.setToolTip("Measure Radius of Arc or Circle\nMeasure Length of Edge")
        self.rbRadius.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbRadius.setIcon(QtGui.QIcon(pm))
        self.rbRadius.setChecked(True)
        self.measureGrid.addWidget(self.rbRadius, 0, 0 )
        # 0,1
        pm.loadFromData(base64.b64decode(Dim_Length_b64))
        self.rbDistance = QtGui.QRadioButton(self.measureGroup)
        self.rbDistance.setObjectName("rbDistance")
        self.rbDistance.setToolTip("Measure Distance")
        self.rbDistance.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbDistance.setIcon(QtGui.QIcon(pm))
        self.measureGrid.addWidget(self.rbDistance, 0, 1 )
        # 0,2
        pm.loadFromData(base64.b64decode(Dim_Angle_b64))
        self.rbAngle = QtGui.QRadioButton(self.measureGroup)
        self.rbAngle.setObjectName("rbAngle")
        self.rbAngle.setToolTip("Measure Angle")
        self.rbAngle.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbAngle.setIcon(QtGui.QIcon(pm))
        self.measureGrid.addWidget(self.rbAngle, 0, 2 )

        # actual measurement tools
        self.snapGroup = QtGui.QFrame(self.form)
        self.snapGroup.setFrameStyle(QtGui.QFrame.StyledPanel | QtGui.QFrame.Plain)
        # self.snapGroup.setTitle("Selection method")
        self.mainLayout.addWidget(self.snapGroup)
        self.snapGrid = QtGui.QGridLayout(self.snapGroup)
        self.mainLayout.addLayout(self.snapGrid)
        self.selectGrid = QtGui.QGridLayout(self.snapGroup)

        # 0,0
        pm.loadFromData(base64.b64decode(Snap_Options_b64))
        self.rbSnap = QtGui.QRadioButton(self.snapGroup)
        self.rbSnap.setObjectName("rbSnap")
        self.rbSnap.setToolTip("Snap to EndPoint, MiddlePoint, Center")
        self.rbSnap.setIconSize(QtCore.QSize(3*btn_md_sizeX,btn_md_sizeY))
        self.rbSnap.setIcon(QtGui.QIcon(pm))
        self.rbSnap.setChecked(False)
        self.snapGrid.addWidget(self.rbSnap, 0, 0, 1, 2 )

        # 0,2
        pm.loadFromData(base64.b64decode(Center_Mass_b64))
        self.rbShape = QtGui.QRadioButton(self.snapGroup)
        self.rbShape.setObjectName("rbShape")
        self.rbShape.setToolTip("Select Shape")
        self.rbShape.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbShape.setIcon(QtGui.QIcon(pm))
        self.rbShape.setChecked(True)
        self.snapGrid.addWidget(self.rbShape, 0, 2 )



        '''
        # new snap/select tools
        self.selGroup = QtGui.QFrame(self.form)
        self.selGroup.setFrameStyle(QtGui.QFrame.StyledPanel | QtGui.QFrame.Plain)
        # self.snapGroup.setTitle("Selection method")
        self.mainLayout.addWidget(self.selGroup)
        self.selGrid = QtGui.QGridLayout(self.selGroup)
        self.mainLayout.addLayout(self.selGrid)
        self.select2Grid = QtGui.QGridLayout(self.selGroup)

        # 0,0 SnapCenter
        pm.loadFromData(base64.b64decode(SnapCenter_b64))
        self.selCenter = QtGui.QPushButton(self.selGroup)
        self.selCenter.setObjectName("selCenter")
        self.selCenter.setToolTip("Select Circle Center")
        self.selCenter.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.selCenter.setIcon(QtGui.QIcon(pm))
        self.selCenter.setCheckable(True)
        self.selCenter.setChecked(False)
        self.selCenter.setFlat(True)
        self.selGrid.addWidget(self.selCenter, 0, 0 )

        # 0,1 SnapVertex
        pm.loadFromData(base64.b64decode(SnapVertex_b64))
        self.selVertex = QtGui.QPushButton(self.selGroup)
        self.selVertex.setObjectName("selVertex")
        self.selVertex.setToolTip("Select Vertex")
        self.selVertex.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.selVertex.setIcon(QtGui.QIcon(pm))
        self.selVertex.setCheckable(True)
        self.selVertex.setChecked(False)
        self.selVertex.setFlat(True)
        self.selGrid.addWidget(self.selVertex, 0, 1 )

        # 0,2 SnapEdge
        pm.loadFromData(base64.b64decode(SnapEdge_b64))
        self.selEdge = QtGui.QPushButton(self.selGroup)
        self.selEdge.setObjectName("selEdge")
        self.selEdge.setToolTip("Select Edge")
        self.selEdge.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.selEdge.setIcon(QtGui.QIcon(pm))
        self.selEdge.setCheckable(True)
        self.selEdge.setChecked(False)
        self.selEdge.setFlat(True)
        self.selGrid.addWidget(self.selEdge, 0, 2 )

        # 0,3 SnapFace
        pm.loadFromData(base64.b64decode(SnapFace_b64))
        self.selFace = QtGui.QPushButton(self.selGroup)
        self.selFace.setObjectName("selFace")
        self.selFace.setToolTip("Select Face")
        self.selFace.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.selFace.setIcon(QtGui.QIcon(pm))
        self.selFace.setCheckable(True)
        self.selFace.setChecked(False)
        self.selFace.setFlat(True)
        self.selGrid.addWidget(self.selFace, 0, 3 )

        # 0,4 SnapShape
        pm.loadFromData(base64.b64decode(Center_Mass_b64))
        self.selShape = QtGui.QPushButton(self.selGroup)
        self.selShape.setObjectName("selShape")
        self.selShape.setToolTip("Select any Shape")
        self.selShape.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.selShape.setIcon(QtGui.QIcon(pm))
        self.selShape.setCheckable(True)
        self.selShape.setChecked(True)
        self.selShape.setFlat(True)
        self.selGrid.addWidget(self.selShape, 0, 4 )
        '''





        # first element
        self.Selection1 = QtGui.QPushButton('Selection 1')
        self.Selection1.setToolTip("Select First Element")
        self.Selection1.setMaximumWidth(150)
        self.Selection1.setCheckable(True)
        self.Selection1.setChecked(False)
        self.sel1Name  = QtGui.QLineEdit()
        self.sel1Name.setMinimumWidth (50)
        self.sel1Name.setReadOnly(True)
        self.sel1Icon = QtGui.QPushButton()
        self.sel1Icon.setFlat(True)
        self.sel1Icon.setMinimumSize(QtCore.QSize(iconSize, iconSize))
        self.sel1Icon.setMaximumSize(QtCore.QSize(iconSize, iconSize))
        self.sel1Icon.setIconSize(QtCore.QSize(iconSize,iconSize))
        self.sel1Icon.setIcon(QtGui.QIcon(self.noneIcon))
        self.selectGrid.addWidget(self.Selection1, 0,0)
        self.selectGrid.addWidget(self.sel1Name,   0,1)
        self.selectGrid.addWidget(self.sel1Icon,   0,2)

        # second element
        self.Selection2 = QtGui.QPushButton('Selection 2')
        self.Selection2.setToolTip("Select Second Element")
        self.Selection2.setMaximumWidth(150)
        self.Selection2.setEnabled(False)
        self.Selection2.setChecked(False)
        self.sel2Name  = QtGui.QLineEdit()
        self.sel2Name.setMinimumWidth (50)
        self.sel2Name.setReadOnly(True)
        self.sel2Icon = QtGui.QPushButton()
        self.sel2Icon.setFlat(True)
        self.sel2Icon.setMinimumSize(QtCore.QSize(iconSize, iconSize))
        self.sel2Icon.setMaximumSize(QtCore.QSize(iconSize, iconSize))
        self.sel2Icon.setIconSize(QtCore.QSize(iconSize,iconSize))
        self.sel2Icon.setIcon(QtGui.QIcon(self.noneIcon))
        self.selectGrid.addWidget(self.Selection2, 1,0)
        self.selectGrid.addWidget(self.sel2Name,   1,1)
        self.selectGrid.addWidget(self.sel2Icon,   1,2)

        self.mainLayout.addLayout(self.selectGrid)

        # Results
        self.Results_Group = QtGui.QGroupBox(self.form)
        self.Results_Group.setToolTip("Results")
        self.Results_Group.setTitle("Results")
        self.Results_Group.setObjectName("Results_Group")
        self.mainLayout.addWidget(self.Results_Group)
        self.resultLayout = QtGui.QVBoxLayout(self.Results_Group)

        # draw annotation in the GUI window
        self.bLabel = QtGui.QCheckBox(self.Results_Group)
        self.bLabel.setObjectName("bLabel")
        self.bLabel.setToolTip("Enable extra Label")
        self.bLabel.setText("Show Label in 3D view")
        self.bLabel.setChecked(True)
        self.resultLayout.addWidget(self.bLabel)

        # draw X-Y-Z components
        self.Components = QtGui.QCheckBox(self.Results_Group)
        self.Components.setObjectName("Components")
        self.Components.setToolTip("Show all dimension components")
        self.Components.setText("Show Components")
        self.Components.setChecked(False)
        self.resultLayout.addWidget(self.Components)

        # Results
        self.resultText = QtGui.QTextEdit()
        self.resultText.setMinimumSize(200, 200)
        self.resultText.setReadOnly(True)
        self.resultLayout.addWidget(self.resultText)

        # apply the layout to the main window
        self.mainLayout.addLayout(self.resultLayout)

        self.form.setLayout(self.mainLayout)

        # Actions
        self.rbRadius.toggled.connect(self.onMeasure_toggled)
        self.rbDistance.toggled.connect(self.onMeasure_toggled)
        self.rbAngle.toggled.connect(self.onMeasure_toggled)
        #self.rbAngle.toggled.connect(self.onAngle_toggled)
        self.rbSnap.toggled.connect(self.onSnap_toggled)
        self.Selection1.toggled.connect(self.onSel1_toggled)



"""
    +-----------------------------------------------+
    |    a selection observer resident function     |
    +-----------------------------------------------+
"""
class selectionObserver():
    def __init__(self):
        global PtS
        self.Sel1 = None
        self.Shp1 = None
        self.Pt1  = None
        self.Sel2 = None
        self.Shp2 = None
        self.Pt2  = None
        PtS       = None

    def render_distance(self, distance: float) -> str:
        return App.Units.schemaTranslate(
            App.Units.Quantity(str(distance) + " mm"),
            App.Units.getSchema(),
        )[0]

    # add the dim to the global addedDims table to be able to remove it
    # add it also the "Measures" group
    def addToDims( self, dim ):
        global addedDims
        # check whether there is a "Measures" group
        if not App.ActiveDocument.getObject('Measures'):
            # if no, create one
            measuresGroup = App.ActiveDocument.addObject( 'App::DocumentObjectGroup', 'Measures' )
        # if there is already one, use it
        elif App.ActiveDocument.getObject('Measures').TypeId=='App::DocumentObjectGroup':
            measuresGroup = App.ActiveDocument.getObject('Measures')
        # there is already a "Measures" object but it's not a Group, don't use it
        else:
            measuresGroup = None
        if measuresGroup:
            measuresGroup.addObject(dim)
        # finally, add the dim to the global addedDims table/list
        addedDims.append(dim)

    # the real function
    def addSelection(self, document, obj, element, position):
        global taskUI
        global PtS

        fntsize='0.25mm'
        ticksize='0.1mm'

        # Select a subObject w/ the full hierarchy information
        # empty string means current document, '*' means all document.
        # The second argument 1 means resolve sub-object, which is the default value. 0 means full hierarchy.
        # sel = Gui.Selection.getSelectionEx('', 0)[0].SubObjects[0]
        selEx = Gui.Selection.getSelectionEx('', 0)
        if len(Gui.Selection.getSelection()) == 1 or len(selEx) == 1:# or (len(selobject) == 1 and len(sel) == 1):
            selObj = Gui.Selection.getSelection()[0]
            #Faces or Edges
            if len(selEx[0].SubObjects)>0:
                subShape = selEx[0].SubObjects[0]
                # we have selected an LCS
                if selObj.TypeId == 'PartDesign::CoordinateSystem':
                    base = selObj.Placement.Base
                    PtS  = self.drawPoint( App.Vector(base.x,base.y,base.z) )
                    subShape = PtS.Shape
                # if valid selection
                if subShape.isValid() and ('Face' in str(subShape) or 'Edge' in str(subShape) or 'Vertex' in str(subShape)):
                    # clear the result area
                    taskUI.resultText.clear()
                    removePtS()

                    # first element selection
                    if not taskUI.Selection1.isChecked():
                        # figure out the first selected element
                        self.Sel1 = None
                        self.Shp1 = None
                        self.Pt1  = None
                        self.Sel2 = None
                        self.Shp2 = None
                        self.Pt2  = None
                        #taskUI.sel1Name.setText(str(subShape))
                        taskUI.sel1Name.setText(str(subShape).split(' ')[0][1:])
                        taskUI.sel2Name.clear()                        # shape selected
                        if taskUI.rbShape.isChecked():
                            # the shape is actually a vertex, thus a point
                            if 'Vertex' in str(subShape):
                                self.Pt1 = subShape.Vertexes[0].Point
                                PtS  = self.drawPoint(self.Pt1)
                                self.Sel1 = 'point'
                            # all other (real) shapes
                            else:
                                self.Shp1 = subShape
                                self.Sel1 = 'shape'
                        # Snap to select a point
                        elif taskUI.rbSnap.isChecked():
                            self.Pt1 = self.getSnap(subShape)
                            if self.Pt1:
                                PtS  = self.drawPoint(self.Pt1)
                                self.Sel1 = 'point'
                        # this measures single objects
                        if taskUI.rbRadius.isChecked():
                            # if we have snapped a point before, we show its coordinates
                            if self.Sel1 == 'point':
                                self.measureCoords(self.Pt1)
                            # if we have selected a shape before, we show its characteristics
                            elif self.Sel1 == 'shape':
                                # a surface
                                if 'Face' in str(self.Shp1):
                                    self.measureArea(self.Shp1)
                                # a point (should have been caught before)
                                elif 'Vertex' in str(self.Shp1):
                                    self.measureCoords( self.Shp1 )
                                # a circle or arc of circle
                                # elif hasattr(self.Shp1,'Curve') and hasattr(self.Shp1.Curve,'Radius'):
                                elif self.isCircle(self.Shp1):
                                    taskUI.sel1Name.setText('Circle')
                                    self.measureCircle( self.Shp1 )
                                # a straight line segment
                                #elif hasattr(self.Shp1,'Curve') and self.Shp1.Curve.TypeId=='Part::GeomLine':
                                elif self.isSegment(self.Shp1):
                                    taskUI.sel1Name.setText('Segment')
                                    self.measureLine( self.Shp1 )
                                # dunno what that stuff is
                                else:
                                    self.printResult("Can't measure\n"+str(self.Shp1))
                            # dunno what that stuff is
                            else:
                                self.printResult("Can't measure\n"+str(subShape))
                            # unset first selection
                            self.Sel1 is None
                        # if not rbRadius, launch the selection of the second element
                        elif self.Sel1 is not None:
                            #taskUI.Selection1.setEnabled(False)
                            taskUI.Selection2.setEnabled(True)
                            taskUI.Selection1.setChecked(True)
                            taskUI.sel1Icon.setIcon(QtGui.QIcon(taskUI.validIcon))
                            taskUI.sel2Icon.setIcon(QtGui.QIcon(taskUI.selectIcon))

                    # second element selected
                    elif taskUI.Selection2.isEnabled(): #step #2
                        #if PtS and ha#sattr(PtS,'Name') and App.ActiveDocument.getObject(PtS.Name):
                        #    App.ActiveDocument.removeObject(PtS.Name)
                        #    PtS = None
                        # figure out the second selected element
                        taskUI.sel2Name.setText(str(subShape).split(' ')[0][1:])
                        if taskUI.rbShape.isChecked():
                            self.Sel2 = 'shape'
                            self.Shp2 = subShape
                        # Snap to select a point
                        elif taskUI.rbSnap.isChecked():
                            self.Pt2 = self.getSnap(subShape)
                            if self.Pt2:
                                self.Sel2 = 'point'
                        # if we have a valid selection:
                        if self.Sel2 is not None:
                            taskUI.Selection2.setEnabled(False)
                            taskUI.Selection1.setChecked(False)
                            taskUI.sel1Icon.setIcon(QtGui.QIcon(taskUI.selectIcon))
                            taskUI.sel2Icon.setIcon(QtGui.QIcon(taskUI.validIcon))
                            removePtS()
                            # Measure distance
                            if taskUI.rbDistance.isChecked():
                                # make a vertex shape out of a point
                                if self.Pt1 and self.Sel1=='point':
                                    self.Shp1 = Part.Vertex(Part.Point( self.Pt1 ))
                                    self.Sel1 = 'shape'
                                if self.Pt2 and self.Sel2=='point':
                                    self.Shp2 = Part.Vertex(Part.Point( self.Pt2 ))
                                    self.Sel2 = 'shape'
                                if self.Sel1=='shape' and self.Sel2=='shape':
                                    self.distShapes(self.Shp1,self.Shp2)
                                # unexpected behaviour
                                else:
                                    self.printResult( 'ERROR 42\n'+str(self.Shp1)+'\n'+str(self.Shp2) )
                            # Measure angle
                            elif taskUI.rbAngle.isChecked():
                                if self.Sel1=='shape' and self.Sel2=='shape':
                                    self.angleShapes( self.Shp1, self.Shp2 )
                                else:
                                    self.printResult( 'Select only faces or lines' )
                        # some problem
                        else:
                            self.printResult( 'ERROR 44\n'+str(self.Shp2) )
                # not valid selection
                else:
                    self.printResult('ERROR 40\n'+str(subShape))


    # uses BRepExtrema_DistShapeShape to calculate the distance between 2 shapes
    def angleShapes( self, shape1, shape2 ):
        global taskUI
        if shape1.isValid() and shape2.isValid():
            Gui.Selection.clearSelection()
            self.printResult( 'Measuring angles' )
            # Datum object
            if shape1.BoundBox.DiagonalLength > 1e+10:
                pt1 = shape1.Placement.Base
            else:
                pt1 = shape1.BoundBox.Center
            # Datum object
            if shape2.BoundBox.DiagonalLength > 1e+10:
                pt2 = shape2.Placement.Base
            else:
                pt2 = shape2.BoundBox.Center
            # get the direction of the shape
            dir1 = self.getDir(shape1)
            dir2 = self.getDir(shape2)
            if dir1 and dir2:
                distance = -1
                angle = dir1.getAngle(dir2)*180./math.pi
                # 2 flat faces
                if self.isFlatFace(shape1) and self.isFlatFace(shape2):
                    angle = 180 - angle
                else:
                    # 1 flat face and 1 direction
                    if self.isFlatFace(shape1) or self.isFlatFace(shape2):
                        angle = 90 - angle
                    if angle > 90:
                        angle = 180. - angle
                # parallel directions
                if abs(angle) < 1.0e-6 or abs(180-angle)<1.0e-6:
                    v1 = Part.Vertex(Part.Point( pt1 ))
                    v2 = Part.Vertex(Part.Point( pt2 ))
                    distance = v1.distToShape(v2)[0]
                self.printAngle( angle, distance )
                try:
                    self.drawLine(pt1,pt2,'Angle')
                    self.annoAngle( self.midPoint(pt1,pt2), angle, distance )
                except:
                    pass
            else:
                self.printResult('Ivalid directions')
        else:
            self.printResult('Ivalid shapes')

    # uses BRepExtrema_DistShapeShape to calculate the distance between 2 shapes
    def distShapes( self, shape1, shape2 ):
        global taskUI
        if shape1.isValid() and shape2.isValid():
            Gui.Selection.clearSelection()
            measure = shape1.distToShape(shape2)
            if measure and self.isVector(measure[1][0][0]) and self.isVector(measure[1][0][1]):
                dist = measure[0]
                self.printResult('Minimum Distance :\n  '+str(dist))
                if dist > 1.0e-9:
                    pt1   = measure[1][0][0]
                    pt2   = measure[1][0][1]
                    self.measurePoints(pt1,pt2)
        else:
            self.printResult('Ivalid shapes')

    # measure a straight line
    def measureLine(self, line ):
        global taskUI
        if self.isSegment(line):
            pt1 = line.Vertexes[0].Point
            pt2 = line.Vertexes[1].Point
            Gui.Selection.clearSelection()
            self.drawLine(pt1,pt2,'Length')
            dx = pt1[0]-pt2[0]
            dy = pt1[1]-pt2[1]
            dz = pt1[2]-pt2[2]
            length = line.Length
            text = 'Length = '+self.render_distance(length)+'\n'
            text += "ΔX = "+self.render_distance(dx)+"\n"
            text += 'ΔY = '+self.render_distance(dy)+'\n'
            text += 'ΔZ = '+self.render_distance(dz)
            # self.printResult( 'Measuring length of\n'+str(line) )
            self.printResult( text )
            if taskUI.bLabel.isChecked():
                mid = line.BoundBox.Center
                if taskUI.Components.isChecked():
                    anno = ['L  = '+self.arrondi(length),'ΔX = '+self.arrondi(dx), \
                            'ΔY = '+self.arrondi(dy),    'ΔZ = '+self.arrondi(dz) ]
                else:
                    anno = ['L = '+self.render_distance(length)]
                self.drawAnnotation( mid, anno )
        else:
            self.printResult( 'Not a valid Line\n'+str(line) )

    # measure distance between 2 points
    def measurePoints(self, pt1, pt2 ):
        global taskUI
        mid = self.midPoint(pt1,pt2)
        if mid:
            Gui.Selection.clearSelection()
            self.drawLine(pt1,pt2,'DistPoints')
            dx = pt1[0]-pt2[0]
            dy = pt1[1]-pt2[1]
            dz = pt1[2]-pt2[2]
            dist = math.sqrt(dx*dx + dy*dy + dz*dz)
            text = 'Distance = '+self.render_distance(dist)+'\n'
            text += "ΔX : "+self.render_distance(dx)+"\n"
            text += 'ΔY : '+self.render_distance(dy)+'\n'
            text += 'ΔZ : '+self.render_distance(dz)
            # self.printResult( 'Measuring length of\n'+str(line) )
            self.printResult( text )
            if taskUI.bLabel.isChecked():
                if taskUI.Components.isChecked():
                    anno = ['D  = '+self.render_distance(dist), 'ΔX = '+self.arrondi(dx),
                            'ΔY = '+self.arrondi(dy),  'ΔZ = '+self.arrondi(dz) ]
                else:
                    anno = ['D = '+self.render_distance(dist)]
                self.drawAnnotation( mid, anno )
        else:
            self.printResult( 'Not valid Points' )

    # measure radius of a circle
    def measureCircle(self, circle):
        global taskUI, PtS
        if self.isCircle(circle):
            radius = circle.Curve.Radius
            center = circle.Curve.Center
            axis   = circle.Curve.Axis
            Gui.Selection.clearSelection()
            self.drawCircle( radius, center, axis )
            text = 'Radius : '+self.render_distance(radius)+"\n"
            # if annotation is checked, show label with R = radius
            text += "Diameter : "+self.render_distance(radius*2)+"\n"
            text += 'Center : \n'
            text += '  ( '+self.arrondi(center.x)+", "+self.arrondi(center.y)+", "+self.arrondi(center.z)+" )\n"
            text += 'Axis : \n'
            text += "  ( "+self.arrondi(axis.x)+", "+self.arrondi(axis.y)+", "+self.arrondi(axis.z)+" )"
            self.printResult(text)
            if taskUI.bLabel.isChecked():
                pt = circle.Vertexes[0].Point
                self.drawLine(center,pt,'Radius')
                self.drawAnnotation(pt, ['R = '+self.render_distance(radius)])
            else:
                PtS = self.drawPoint(center)
        else:
            self.printResult('Not a valid circle\n'+str(circle))


    # figure out the direction of a shape, be it a line, a surface or a circle
    def getDir( self, shape ):
        direction = None
        # for a segment, it's the normalized vector along the segment
        if self.isSegment(shape):
            line = shape
            pt1 = line.Vertexes[0].Point
            pt2 = line.Vertexes[1].Point
            vect = (pt2.sub(pt1))
            if vect.Length != 0:
                direction = vect / vect.Length
        # for another line (like Datum::Line) it's the Z vector
        # multiplied by the Line's Placement
        elif self.isLine(shape):
            direction = shape.Placement.Rotation.multVec(App.Vector(0,0,1))
        # for a Circle it's the circle's axis
        elif self.isCircle(shape):
            direction = shape.Curve.Axis
            # TODO: drawAxis(circle)
        # for a flt face it's the normal
        elif self.isFlatFace(shape):
            direction = shape.normalAt(0,0)
            # TODO: drawNormal(face)
        return direction

    # figure out snap point of shape
    def getSnap( self, shape ):
        point = None
        if shape.isValid():
            if 'Vertex' in str(shape):
                point  = shape.Vertexes[0].Point
            # for a circle, snap to the center
            elif 'Edge' in str(shape) and hasattr(shape,'Curve') \
                                      and hasattr(shape.Curve,'Radius'):
                point = shape.Curve.Center
            # as fall-back, snap to center of bounding box
            elif hasattr(shape,'BoundBox'):
                point = shape.BoundBox.Center
        else:
            self.printResult('Invalid shape\n'+str(shape))
        return point

    # measure the coordinates of a single point
    def measureCoords(self, vertex ):
        global taskUI
        point = None
        if self.isVector(vertex):
            point = vertex
        elif hasattr(vertex,'isValid')  and vertex.isValid() \
                                        and hasattr(vertex,'Vertexes') \
                                        and len(vertex.Vertexes) > 0:
            point = vertex.Vertexes[0].Point
        else:
            self.printResult('Not a valid point\n'+str(vertex))
        if point:
            #self.printResult( 'Measuring coordinates of\n'+str(vertex) )
            anno = ['Coordinates :', 'X : '+self.arrondi(point.x), 'Y : '+self.arrondi(point.y), 'Z : '+self.arrondi(point.z)]
            text =  'Coordinates :\n'
            text += "X : "+str(point.x)+"\n"
            text += 'Y : '+str(point.y)+'\n'
            text += 'Z : '+str(point.z)
            self.printResult(text)
            if taskUI.bLabel.isChecked():
                self.drawAnnotation( point, anno )


    def measureArea(self, face ):
        if face.isValid() and hasattr(face,'Area'):
            if self.isFlatFace(face):
                self.printResult('Flat face\nArea : '+str(face.Area)+'\n')
            else:
                self.printResult('Area : '+str(face.Area)+"\n")
        else:
            self.printResult('Not a valid surface\n'+str(face) )


    def printDims(self, ds, dx, dy, dz, dimType='Distance'):
        text = dimType+' : '+str(ds)
        text += "\nΔX = "+str(dx)+"\nΔY = "+str(dy)+"\nΔZ = "+str(dz)
        self.printResult(text)

    def printAngle(self, angle, distance=-1 ):
        global taskUI
        taskUI.resultText.clear()
        text = 'Angle : '+str(angle)+'°\n'
        if distance != -1:
            text += 'Distance // '+str(distance)
        taskUI.resultText.setPlainText(text)

    # print the result in the text field of the UI
    def printResult(self,text):
        global taskUI
        taskUI.resultText.clear()
        taskUI.resultText.setPlainText(text)

    def drawAnnotation(self, pos, textTable ):
        anno = App.ActiveDocument.addObject("App::AnnotationLabel","MeasureLbl")
        anno.BasePosition = pos
        # textTable is a table if strings: [ 'toto', 'titi', 'tata' ]
        anno.LabelText = textTable
        annoG = Gui.ActiveDocument.getObject(anno.Name)
        annoG.FontSize = annoFontSize
        self.addToDims(anno)

    def drawCircle( self, radius, center, axis ):
        global taskUI
        cc = Part.makeCircle( radius, center, axis )
        circle = App.ActiveDocument.addObject('Part::FeaturePython', 'aCircle')
        #circle.ViewObject.Proxy = setCustomIcon(circle,'Draft_Circle.svg')
        circle.ViewObject.Proxy = setCustomIcon( circle, taskUI.circleIcon )
        circle.Shape = Part.Wire( cc )
        circle.ViewObject.LineWidth = 5
        circle.ViewObject.LineColor = ( 1.0, 1.0, 1.0 )
        circle.ViewObject.PointSize = 10
        circle.ViewObject.PointColor= ( 0.0, 0.0, 1.0 )
        self.addToDims(circle)

    def drawDim( self, pt1, pt2, name='aDim', width=2 ):
        global taskUI
        if pt1!=pt2:
            # unit direction vector
            vDir = App.Vector(pt2.sub(pt1))
            uV   = vDir.multiply(1/vDir.Length)
            #setup the contour
            color = coin.SoBaseColor()
            color.rgb = (1, 1, 1)
            points=coin.SoCoordinate3()
            lines=coin.SoLineSet()
            points.point.values = ( (0,0,0),(10,10,10),(10,10,0) )

            #feed data to separator
            sep=coin.SoSeparator()
            sep.addChild(points)
            sep.addChild(color)
            sep.addChild(lines)

            #add separator to sceneGraph
            sg = FreeCADGui.ActiveDocument.ActiveView.getSceneGraph()
            sg.addChild(sep)


    def drawLine( self, pt1, pt2, name='aLine', width=3 ):
        global taskUI
        if pt1!=pt2:
            line = Part.makeLine( pt1, pt2 )
            wire = App.ActiveDocument.addObject('Part::FeaturePython', name)
            wire.ViewObject.Proxy = setCustomIcon(wire, taskUI.lineIcon )
            wire.Shape = Part.Wire(line)
            wire.ViewObject.LineWidth = width
            wire.ViewObject.LineColor = ( 1.0, 1.0, 1.0 )
            wire.ViewObject.PointSize = 10
            wire.ViewObject.PointColor= ( 0.0, 0.0, 1.0 )
            self.addToDims(wire)
        else:
            point = App.ActiveDocument.addObject('Part::FeaturePython', 'aPoint')
            point.ViewObject.Proxy = setCustomIcon(point, taskUI.pointIcon )
            point.Shape = Part.Vertex(Part.Point( pt1 ))
            point.ViewObject.PointSize = 10
            point.ViewObject.PointColor= ( 0.0, 0.0, 1.0 )
            self.addToDims(point)

    def drawPoint( self, pt ):
        global taskUI
        point = App.ActiveDocument.addObject('Part::FeaturePython', 'PtS')
        point.ViewObject.Proxy = setCustomIcon(point, taskUI.pointIcon )
        point.Shape = Part.Vertex(Part.Point( pt ))
        point.ViewObject.PointSize = 10
        point.ViewObject.PointColor= ( 1.000, 0.667, 0.000 )
        self.addToDims(point)
        return point

    def annoAngle(self, pos, angle, distance=-1 ):
        global taskUI
        anno = App.ActiveDocument.addObject("App::AnnotationLabel","AngleLbl")
        anno.BasePosition = pos
        if distance == -1 or taskUI.Components.isChecked()==False :
            anno.LabelText = [self.arrondi(angle)+'°']
        else:
            anno.LabelText = ['Angle: '+self.arrondi(angle)+'°', 'Distance // '+self.arrondi(distance)]
        annoG = Gui.ActiveDocument.getObject(anno.Name)
        annoG.FontSize = annoFontSize
        self.addToDims(anno)

    # round to precision anno_precision
    def arrondi( self, val ):
        approxval = int(val/annoPrecision + annoPrecision*0.1)*annoPrecision
        string = '{0:.3f}'.format(approxval)
        return string

    def midPoint(self, pt1, pt2):
        if self.isVector(pt1) and self.isVector(pt2):
            return App.Vector.add(pt1,(pt2.sub(pt1)).multiply(.5))
        return None

    def isVector( self, vect ):
        if isinstance(vect,App.Vector):
            return True
        return False

    def isCircle(self, shape):
        if shape.isValid()  and hasattr(shape,'Curve') \
                            and shape.Curve.TypeId=='Part::GeomCircle' \
                            and hasattr(shape.Curve,'Center') \
                            and hasattr(shape.Curve,'Radius'):
            return True
        return False

    def isLine(self, shape):
        if shape.isValid()  and hasattr(shape,'Curve') \
                            and shape.Curve.TypeId=='Part::GeomLine' \
                            and hasattr(shape,'Placement'):
            return True
        return False

    def isSegment(self, shape):
        if shape.isValid()  and hasattr(shape,'Curve') \
                            and shape.Curve.TypeId=='Part::GeomLine' \
                            and hasattr(shape,'Length') \
                            and hasattr(shape,'Vertexes') \
                            and len(shape.Vertexes)==2:
            return True
        return False

    def isFlatFace(self, shape):
        if shape.isValid()  and hasattr(shape,'Area')   \
                            and shape.Area > 1.0e-6     \
                            and hasattr(shape,'Volume') \
                            and shape.Volume < 1.0e-9:
            return True
        return False




"""
    +-----------------------------------------------+
    |            embedded button images             |
    +-----------------------------------------------+
    >>> import base64
    >>> icondata = open('Assembly4.png','rb').read()
    >>> icon_b64 = base64.b64encode(icondata)
    >>> file_b64 = open('Assembly4_b64.txt','wb')
    >>> file_b64.write(icon_b64)
    10980
    >>> file_b64.close()
"""
import base64
# "b64_data" is a variable containing your base64 encoded icon
draftPoint_b64=\
"""
iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAAWdEVYdEF1dGhvcgBbeW9yaWt2YW5oYXZyZV3R/pfWAAAAG3RFWHREZXNjcmlwdGlvbgBBIGRvdCBvciBjaXJjbGUOOmfJAAAALHRFWHRDcmVhdGlvbiBUaW1lAFNhdCBEZWMgMTcgMTU6MzY6MDIgMjAxMSArMDAwMNC6QOkAAAP5SURBVHic7dhbb1RVGMbx/9pzFMSWKQMtNCBYHCo9aAqxYlRuuIF6uhD9DCghAWr8BhrKwYRWv4EJ8UIlgBfcEBNBTECm02O0KpJSQKZMa2n33mtmvV7M9ABGuVqTGNYvmcxMZrL2s57svfYBHMdxHMdxHMdxHMdxHMdxnMeHqubGdu4kmr9Nl4K9Au0KGioh8gZ+QHG6bjVfXbhAsVqZqlZAazO7FXwGbHjEX68r4YPsCGeqkasaBaj2Zj4R+BAg01Qzdmh/y42WzMr6RNJbgygVhKU7gyOFiaMn+xtHf5l+BhBRnMgNcRgQq+FsDg7QtoUeFIdjUS/o7Xnp0vYXVr0CRP7l73Ilm/9uf/fFF/3QJFEc6y+XYI3VAiq7/ZlEzAtOf7Erl04ntyOCEYMpGcQUkZIgniLiRYjEYygUk5P+ld3vnm8JtUl40HVtmLO2Mnq2Bn4HIgr6AHXi485L6XRyu4gQhiGh76MDHx1qtA4J/TlmZ6aZKRQwpkQqlezoO7bjRwADfR0dxGzltFbA6FbeBp7evOmpsc5t6ddEhGBuFh34FHVIUevKe0gx1BS1JpybZSp/F0HoaKt7uTlTOwZsCGfZYyuntQLE8CZA94HWG4BXDEN04FPSenHy4UNFaE0we5/ZqWkA7+D7LTcBFOy1lTNqa2APOgVoy6ysB/Dn7lPUGjEGYwwighiDiEFMeV0QU37NFCZZXlNDS6a2oTLc87ZyWitAIA0QS0TWAYT+HKZYQsRgjFQmvljE0lKKOgQgkYg0VoZbbyuntQKWjK0AilovFCDGYOb3gMpesLSU+ZOTyMI1gLYV0t4aANcBgqA0DqCUeuBYLx//82uAprTkt0i03J0fliYqw92xldNaAQqyAIOjhVsAyWVPLkz2gSIeKKX8fUWqDoCR0cJ8AZdt5bRZwJcAx3tza4HSipUpvGh0YeUv/eM0WP4cjSVIrWkAkKN9A2sBEL6xldNaAdFlnAGuD/88tflq9u73SinWbmwiEos/tAcsTj4WT7KppR3P87iazV8cHi1sBH7LjPC1rZzVuBQ+G495wblTuwZSqWSHMYb8xDj3bt/i/l9TiDE8sXwFqfoG0o3r8TyPyUKQff2985k5v5QQ6MoNc85WRvs3Q80cAbqTcc8/2bPjckd73av/sV3zU3/+0r7DF7cFoUmI4nhuiEM281Xldrj1OY4q4SBApqnm1+4DreNbn61tiMcj9UqRCALzx8DovZuffj64bnD43qZKsCPZYT7i/347PK99C12i6OXRD0R+F8W+3BDfViNX1R+JTf7JWxjeADqBVZQX4pvANVGcqlvN2Wo+EnMcx3Ecx3Ecx3Ecx3Ecx3EeJ38DdD0uzREulD4AAAAASUVORK5CYII=
"""
draftLine_b64=\
"""
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
"""
draftCircle_b64=\
"""
iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAAPdEVYdEF1dGhvcgBbd21heWVyXauF7RsAAABsdEVYdERlc2NyaXB0aW9uAEEgY2lyY2xlIHdpdGggYSBkb3QgYXQgaXRzIGNlbnRlcnBvaW50IGFuZCBhbm90aGVyIG9uIHRoZSByaWdodGVybW9zdCBwb2ludCBvZiBpdHMgY2lyY3VtZmVyZW5jZR4JmPMAAAAsdEVYdENyZWF0aW9uIFRpbWUATW9uIE9jdCAxMCAxMzo0NDo1MiAyMDExICswMDAwllnaYQAAE8pJREFUeJztm3l4lNW9xz/nfWcmM9nIvoclAiGQEDAbuNRYEa1LhSq2BVu1z63XDegt2j5ttd7e2tYCohVQa2tLXaottoriVlyoKBBIBBKysciSfbJNtsnMvPOec/+YJATZJpLcf67f5+Eh8y7f8/19zznvOef3nhe+xJf4Ev+fIcaKuLi42NLR3Z+PziUoNQ3IBFIRRKEIBxSCPhSdCBqAWiFVjUL/ODMjvXTjxo3mWGkbjlE1YMaMGTZLWNi1SopbFGqegMgvwqOgW6C2KCVekJ6+tyorK32jqXM4RsWA2bNnx5u69QfAnUDM4PGiwnzmz7uCzClTSEhMIDI8EqvNiq5pKAV+04/P56Oru4vm5hZqDx5gy3sf8umevcPp24UQT1mk/3dlZWVto6F3OM7LgBkzisMtDveDCu4FQgEuv+wrfGfJt8iZkY3NFjJ0rUKBAqVU4LdSg0dBKZQa/KXo7+9nb3k5L//tFbbvLBmk6FNCrBXe/ofLy8v7zkf3cHxhA3LyChcIwRNAuqZp3PbdxXxnyRJiooYaAIbfoK+vB7fHjc/nxefzYUo/UkoAdKGjW3QsFis2qw17iAO73YGu6YPW0OJ08uJfX+aVVzcN3ndcIZZVlJZsOp/ABzFiAyYWF9sj+/p/i1LLAK6aP4+f/uh+osZFAYFm3dXViau7k36P+zQFiqFShRAnjoqhs9hsIYSGhhHmCEMIDQCn08nqx5/gk+07B6metyrzzrKyslMLGQFGZMDMoqI04VeblSA3LDyM9Y+vYXbuLBQKwzBo63DicnUgVaCGPR4vNbUHqa05SF19A83NTnp6e+nv9wDgcNiJjIwkJSWJCenpTM+aytSpkwmxhyAGDHLYwwgLC0fXNKRS7CzZxS9++WvcAY69wqpft2/HjoYxNyAnL2+aEPq7wPiC/DzWrHyEiPAIpJS0d7bS1u5EKolSin3llWzbtp2yT8sxDGNEgkJsVormFHB58aVkz8hCE2LAiFAc9lAAnG1t/Py/H6am9gDAMaXMqyvKympGVNAAgjIg+8I5WZomPwLivn79Nfz8Jz9B1y14fR7qm47j9QZqtKSklFc3vU1dXf3grSaInULwIUJ9avq1GmFYmm22/l4An88Rbgk1kqVSmUqSJ+ByBUWADnDBBZP41s3fIO/CWQgh0DSNMEc4mqbh8Xr51SOrBrtEK8hLy0tLa0fdgOyCgnRNiU+A9Fu+fTM/WLYMTQi6e7tpaqlHSkmLs5Vn//QClZVDlXAcWKeb1hf37PmkcSSCZs++OMXUjSUERpbxAAX5F3LH928jPi4WIQQ2awhWqxW/4efR361jy3sfABwTVv3ikXaHsxowd+5cR59h7gRmXjX/Ch5+6CE0TcPV7cLpbEIJxfbtJTz75xcH+3WrEupnNik3lJWVjaztfw55eXlWn2a5XSj1MBAfFhbKD39wDwX5FwJg0S3oFgt+w88vf7OKnTt3AeztDg+de3TrVk+w5ehnOxmTmPokgmsuvHAWq3/9azRdp7OrA2dbMwj4+8ZNPPfC3/D7/QjFi6ZNv3Z/ScknTU1N8nyCB2hqapLOxoayuAnjn9WUSjd8Rs5H27bjcDjImpYJgFISTdMpKsxnd9keOjtdSSE+I66lseHNYMs5owG5hYULgZVhYaE8+/STOBwOevt6aG1vBgQbnnuZN9/6F4CB4s7ysl0PtNbX959n3Kegtb6+v6Wx4Z8JqWlNAq7es7dcV0hmzsxBCIFUEouuM2tWDlu2vI/fNPMTUtL2OhsbgnoenNaAGTOKw4XFeBOIfOKxlUycMBGfz4vT2QQCNr7yOpvffBfAjVALy0t3/30UYz4tnI0NZQkpyaUCsXB/ZbU1IjKcaZlTEYBUivDwMOLj49ixczcCLkqMi/1DS0vLObuhdrqDFof7QSCt+CuXMGvmLKQ0aW1vRgnFrt17+OerbwAYCnlT+e7d74xuqGdGRWnp2wp5E2D8/pk/s3dvOZqmY9F0pJRceslccrKnA4zHZv9pMJynGDB79ux4BfdqmsZ9P1yOUoqu7k78fj+tzjae/v2fBi+9q6K09O1Riy5IVJSWvq2EuBfgkZWP4epyoVt0NC3QmL9325LBGeayvLy8uHPxnWLAwKoudNFNC4iOisbv99HT14MQgmc3vIjb3Y9CvFBeuuvZ0Q0teFTsLnkGwV+7e3p45g8bEEIjxBaCUorx49MoKswDCPdrluXn4jrJgMmTJ4cQWNLyzZtuRClFd283Aij7dB979pSDwInXumwsAhsJfIJlQNsHWz+iuqYWTdOw2WxIqVhww7UAKKXumjFjhu1sPJbhP0KjYq8DFTOnqID4uDj8fv/ALE/w942vBS6S/Kyi4uPOkYgtLsbS3sJ1Am5WkCsgGUBAu4SdCF6PTeDVrVvxB8tZs2tX+6yCgoek37X+5z/9HuPCLXQMTMcjIqIIs0Cf1xarO6KuB/4RlAECdYsCbrj+WqRSuD1uEFBVVctnR44CHLdi/mUkwedkcU1HC08KmDAQ9BAURAuYjOKWjhaO5U7j3n01bA6W1+zd/WMBuDzgGpYq6evtHhaU5bncaXjPxDtkQHFxsaWj132FEIKZOdlIKfEZXjShsfXf2wYvWzeCGZ7IzeIRBT8CyJw87vCKpdl12ZnRSSF2LRElhNdnOitrXE2r15an1R7qvkAJXs+ZzmMVVdwX8OfcvBdMiu5Y8PWsmMsvTiUpwQJK4fbYqT7s55FV73DkWFvo2XiHKiSnsHCukGzPzs7iiTWrkdKkp7cbr8/HrbffhdfrlehiQnlJST1BYOY0ViG4z2rRvOtWzd1RMDvuUs488VJl+9o/Wnr/9iKPT9oRPFoeEHtO3vxZcV8R4vTDuVLw0mutrH1qp8/rk7bT8Q7dKJS4GGBOQSFKSgzDhxCCI0eO4fV6EbAz2OBzsrgGwYoQq+bZ/NKV5QWz44pRSpfSxG8YGN5+fG43Xk8/fp8PhRJ5ubGXbX75ykqbVfOiWDEri2uD4RUo7Uy8CFi8MJ7nnp7nPBPvkAFKqSyAiRPTkUpimiaa0KitOTDgkPggmOAXgS5gPSAe+82cHfHx9gKlFD6fD5/Hg+H1YPgMDMOHz9OPu7ebXpcLKU1iYux56x+9aBeAhPV5eVjPj7cTKU2mZDjSzsR7ogUgMgESEuIDiQ1AaIIjx+sAkFKVBWNA7QwWAhOnZEQenpMff5lSCm+/G8PrwW/48BvGwP8+/D4Dv2Hg63fT1d6GQpE3M/birMyow8AEn/tEbY0V77C+o9IBosaNQw0kLYUQ1NUFltcWizgQjAFKcgPA/ctz6gDN7/NheD2YhnFCpO9zgg0Dr7sPd1c3gPbDe7IbA5XCzWPNO3wYDAewWK1IpdCEACHo7AgM+T5Naw7GAA3mKGBmZnQSgKe/D79hoKREykDKTEmJUhIlVaC1ycC/XlcHYePGkZ0ZlTxAN2useU8xwGoJLCzEQC6uzz2QdO3u7g3GAAXxANYQPRXA5+lH+k2UkkipBgSeEDxcvN8IvAAKCdHTBujGjzXvSRMhAFNKdAG6ZgExoqTx5zkFgN8whoQqKZGDNTVQW8PFD47KSg2N1cZY8w4fP3sBPF5PoAUQaAHhYWGBs5GR4cFEr+AYgNdrNkDgOTK8Twb66WBfNTCHndMtgRg9PrNpgM451rzDDegBcPe5A84J0IRGQkJgRan5SA3GAAH7ACprXc0A9tDwIVEnCT5JfOB3REwsADW1rkGhJWPNO9yAYwDO1tZA85EKIQQZGRkBAUJODdKAjQBr1lWkAGZEdAyaxTL0hDZPGa4Cf1usIcQkJgOo1ev3pwCg2DTWvCcMEBwAqG9oQEqJVCZCCKZOuWDAAFUQjAGWUDYDx6oPdk35dF/bJ0IIUiZNRrfaPldTJ0RabXYysnPRNI1P97Vvr651TQKOZNbw2ljzDpsJUgVw+PBRlJL4DT9CCLKnZw2cF5cHY0BZGYaCuwHuvm9HUUeHp8xqszFpxkwS0idis4di+v2Yfj8hjjBSMqYyrWAONrudDpd339If78gLyOHejWCOBu/hY/2NZ+IdesxnFxbma5LdqSlJrFn9K4QmiItJwPSbLFi0mL6+PqVZtIy9O3ceDcaImVmsBO632zTP2lUXleTlxn6Fk1fDwyH3lLfvuPu+7flenwxRgjUVVaw4X16l4JXNraxZG1gMnY53aHV22UUXtbS7upb39PTaiy+7BLs9BHuIHZvVhtvtpmJ/pVBStbU0Nmw7tahT0dLGewkJRJimuvSNd45P3Ppx85GMSRH7Y6JCDF3XbEIgvF55dF9VR+WP/7tU/vH5A7mmqSwCVpZXB5a6wfB+uM3pMkWYIykxBofdgkDR64lkX7WVFQ/8m02bazBNpZ+J9yTnZuYXvQzqm9/+9o1cd818wsMiiIqM5lhdHd+9/Q4UNPWEh2aM5M1L7jSuU4J1DCREzoKjSnB3RRVBJVpzp3GdFKwXwyY1p4Ww9imMRWfiPWl9npSU6kGwuKurm3lXXIbf9BMRHkl0dDSVVdU0NjZF2L2Gs6WpYVcwIgFa2jiQlc26/n4qUHgJ7CTRAB9wBHhPCR6MTWTprt0Etd4Y5E2ZmI/SQ69OSkoiJjoKpRS6xUJCYiom4RgiES1kws3l+xrPmGU6qQXk5eVZDU2vR5HwwM9WkDVtKtHjYoiMiOLQ4cPc9h93gqBT9xuZe/bsaQ1W7Fggu6goUTNVDRC1+dVXSE9Lp63DSbOzkZrag/zy4dUgcFqlmXa2LNZJmZSysjJDINYDvPFG4H1Hd28XCsWUyZNZeMN1oIg2deuTYxlcEBDCr54CopYs/ibpaelIKWnrCNTJa5veClwk1TlTeKekkvwWbR3QU15RxYEDhzBNk65uF0Jo3P2fdxATEw1wU05+4b2jHVWwmFlQtEwIFsbHx7H0rrsAcLY14/cb1NYeoqKiCqBLmMbac3GdYkDljh0dwBqlFBv+8jJKKrp7XBiGl4iICB5f/VsABDyek190w6hGFgRy8goXoNSjQgj++PR6HHYH/Z5+2jtbkVKy4bm/BvQJsWbv3r2uc/GdNpkYZtV/Cxw5dryOd959D6UULW1NKKWYNjWTRx7+BYAuUC8PvEX+P0FuYeFCIXgJ0J9Ys4qJ4ycipaS+8ShKKd56+z2OH28AONwV5lgZDOdps7T19fX+hJS0gwIWV1UfELm52YyLjMDwG0SER5KRkUFCXCzbPtluQXFTYkpad0tjQ8npuEYJIie/8L9Q/AGw/c9DD3DVvCtRKOoajuHu7+Pw4SM89fSfkVIqhFpSu317UHuGzrg/wNnYcDAxOSVaKjWnqqqGi+YWIgSYpklEWCTTs6Yxdepktrz/gQbq6sSU1FlxqSlbWxsbg0qcBIu8vLzk+NT05wUsF0JoTzy2iqvmzQegsbmeru5Oerp7eGTVE/T29gLqd+Wlu9cHy3/WHSIRYaEfWuyOq/r63KlV1Qe4aG4hpmkE5gdhkWRMnMTVV83j3x99TG9f3zQN8f2k5BQjLSV5X1NT0/lukQlNSElfagptI5AbGxvDixv+NLQtr6m5nk5XOz6fj5Wr1lJX3wBQYva7l7S2tga90fqsBnR0dJgJ6WmvC8XCzk5XzOHDRygouBDTNPD6PESEjyMmOoYbv7EAw/Cxr3y/HSHmS6HdkZCcEh6fPKG+tam+YySBZ+flXZCUmr5cCu15BN8A7Ld+ZzGPrVpJQnwCpjSpazhKV7cLj8fLo489SU3tQQQcwme5cv/+T7vPWcgwBLdNLi/vAiH0bQKSMyZN4P4VS4kcF4HNFkJ6yoSh/Xv1DXU8vnY9W97/cPjt5Sj1odLYrcMBqWlNmtfbC6AcjjDTNJOFydTAclt8FcgZ1HXlFZezfOk9pKemA9DvcVPXcAyf4aW7q4dVj67lsyPHUNCEUJdU7N792UiCD9oAgJmFhZOQvANMjYuLZek932fy5EkIIYiNjichLglNCwwqLc5m3v7XFjY89wKdnecciU5C1Lhx3H7rLVw9fz5JiUkASClxtjXT3tmKUopDh46wdv0ztLV1AHym6eLqvSUlB0dU0ABGtlV25kUJhPg3oZij6zqLbvw611xzJboe2PAcFxNPTFTckBFSStraW6mqrqaqppbKymrqGhpwuVyAICYmitTkZGbMmE5WZibTp2cRHxt/0v0drjbaOlrx+w1M0+Stt7aw8R+vY5omwA58lgXl5dudZxQ9mgbA0FvkB4AHAS0tNYVbv/stpk8PbF3TdZ1xkdFERUYT6gj7QqLc/X24ujvp6u4cDJTq6gNs+MtL1Dc0AiiEWGu6e+8/348pvvB2+ez8ois1pdYjmAKQlTWVG67/Gjk504eusegWQkPDCXOEYQsJwWYNwaJbhtWwid808RlevF4v/f199Ll78Zsn9klUVtXw6mtvUl09tFA8IBH37i8t2fJFtQ/HeX0wMXny5JDQqJgVwP1AFEBSUiKXXFzEnKI8kpOTvhBvc3MLO3aW8sn2XTQ1NQ8q7USx2u3qePTQoUPe89E9HKPyyUxRUVGk21R3CtRyECmDx6Ojo5g+fRoTx6eRlJxAYkIiDkcIdnvgSxKPx4vH46WlxUlTUwvH6+qprKqlo2P4DhzViNDWOTTWl5SUjGiICwaj+tHUokWL9Oojx7+qKxYrob4GJH5BVU4U7wolXpiaMf79sfyCbMw+mwOYXVQ0XZrqUiXEdFCZKDEBVDgD7yEJvI3qUVAH1AqlqhFqW3lpaSVn3iLzJb7El/gSo4b/BX95FbChOE4KAAAAAElFTkSuQmCC
"""
draftDimension_b64=\
"""
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
"""
select_b64=\
"""
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
"""
valid_b64=\
"""
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
"""
Center_Mass_b64=\
"""

"""
Snap_Options_b64=\
"""

"""
Dim_Radius_b64=\
"""

"""
Dim_Length_b64=\
"""

"""
Dim_Angle_b64=\
"""

"""
Dim_Parallel_b64=\
"""

"""
SnapCenter_b64=\
"""

"""
SnapVertex_b64=\
"""

"""
SnapEdge_b64=\
"""

"""
SnapFace_b64=\
"""

"""




"""
    +-----------------------------------------------+
    |       add the command to the workbench        |
    +-----------------------------------------------+
"""
Gui.addCommand( 'Asm4_Measure', MeasureCmd() )

